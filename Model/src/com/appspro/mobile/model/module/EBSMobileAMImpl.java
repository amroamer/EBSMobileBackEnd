package com.appspro.mobile.model.module;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import java.util.ArrayList;

import oracle.jbo.JboException;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 10 18:42:37 GMT+03:00 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EBSMobileAMImpl extends ApplicationModuleImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public EBSMobileAMImpl() {
    }

    /**
     * Container's getter for XXEmployeeInfoVO1.
     * @return XXEmployeeInfoVO1
     */
    public ViewObjectImpl getXXEmployeeInfoVO1() {
        return (ViewObjectImpl)findViewObject("XXEmployeeInfoVO1");
    }

    public Row getEmployeeByUserName(String userName) {
        Row row = null;
        ViewObjectImpl vo = getXXEmployeeInfoVO1();
        ViewCriteria vc = vo.createViewCriteria();
        ViewCriteriaRow vcRow = vc.createViewCriteriaRow();

        vcRow.setAttribute("UserName", userName);
        vc.addRow(vcRow);

        vo.applyViewCriteria(vc);
        vo.executeQuery();

        if (vo.hasNext()) {
            row = vo.next();
        }
        return row;
    }

    public Row login(String userName, String password) {
        Object empName =
            callStoredFunction(Types.VARCHAR, "XXX_MOB_AUTH_PKG.VALIDATE_LOGIN(?,?)",
                               new Object[] { userName, password });
        Row row = null;
        if (empName != null) {
            ViewObjectImpl vo = getXXEmployeeInfoVO1();
            ViewCriteria vc = vo.createViewCriteria();
            ViewCriteriaRow vcRow = vc.createViewCriteriaRow();

            vcRow.setAttribute("UserName", userName);
            vc.addRow(vcRow);

            vo.applyViewCriteria(vc);
            vo.executeQuery();

            if (vo.hasNext()) {
                row = vo.next();
            }
        }

        return row;
    }

    /**Method to call Database function
     * @param sqlReturnType (Return type of Function)
     * @param stmt (Function Name with Parameters)
     * @param bindVars (Parameter's Value)
     * @return
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt,
                                        Object[] bindVars) {
        CallableStatement cst = null;
        try {
            //Creating sql statement
            cst =
this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;",
                                                0);
            //Register dataType for return value
            cst.registerOutParameter(1, sqlReturnType);
            //Pass input parameters value
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    cst.setObject(z + 2, bindVars[z]);
                }
            }
            cst.executeUpdate();
            //Finally get returned value
            return cst.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            if (cst != null) {
                try {
                    cst.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public Row getEmployeeImage(String userName) {

        Row row = null;

        ViewObjectImpl vo = getXXEmployeeInfoVO1();
        ViewCriteria vc = vo.createViewCriteria();
        ViewCriteriaRow vcRow = vc.createViewCriteriaRow();

        vcRow.setAttribute("UserName", userName);
        vc.addRow(vcRow);

        vo.applyViewCriteria(vc);
        vo.executeQuery();

        if (vo.hasNext()) {
            row = vo.next();
        }

        return row;
    }


    public ArrayList<Row> getApproversList(int requestId) {
        ArrayList<Row> approversList = new ArrayList<Row>();
        ViewObjectImpl vo = getXXEmployeeInfoVO1();

        
        vo.executeQuery();
        while (vo.hasNext()) {
            approversList.add(vo.next());
        }
        return approversList;
    }


}
